"use strict";function _createForOfIteratorHelper(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,t=function(){};return{s:t,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,i=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return o=e.done,e},e:function(e){i=!0,a=e},f:function(){try{o||null==r.return||r.return()}finally{if(i)throw a}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var slideInterval,toggleButton=document.getElementsByClassName("toggle-button")[0],navbarLinks=document.getElementsByClassName("navbar-links")[0],footerYear=document.querySelector(".footer-year"),slides=document.querySelectorAll(".slide"),next=document.querySelector("#next"),prev=document.querySelector("#prev"),auto=!0,intervalTime=7e3;toggleButton.addEventListener("click",function(){navbarLinks.classList.toggle("active")});var handleCurrentYear=function(){var e=(new Date).getFullYear();footerYear.innerText=e};handleCurrentYear();var nextSlide=function(){var e=document.querySelector(".current");e.classList.remove("current"),(e.nextElementSibling||slides[0]).classList.add("current"),setTimeout(function(){return e.classList.remove("current")})},prevSlide=function(){var e=document.querySelector(".current");e.classList.remove("current"),(e.previousElementSibling||slides[slides.length-1]).classList.add("current"),setTimeout(function(){return e.classList.remove("current")})};next.addEventListener("click",function(e){nextSlide(),auto&&(clearInterval(slideInterval),slideInterval=setInterval(nextSlide,intervalTime))}),prev.addEventListener("click",function(e){prevSlide(),auto&&(clearInterval(slideInterval),slideInterval=setInterval(nextSlide,intervalTime))}),auto&&(slideInterval=setInterval(nextSlide,intervalTime));var colc=new Colcade(".grid",{columns:".grid-col",items:".grid-item"});!function(){function i(e){null!==(e=e.nextElementSibling)&&e.classList.contains("form-error-text")&&e.remove()}function l(e,t){null!==(e=e.nextElementSibling)&&e.classList.contains("form-error-text")&&(e.style.display=t?"block":"none",e.setAttribute("aria-hidden",t))}function s(e,t){t?e.classList.add("field-error"):(e.classList.remove("field-error"),l(e,!1))}var c=document.querySelector("#contactForm"),u=c.querySelectorAll("[required]");c.setAttribute("novalidate",!0);var e,t=_createForOfIteratorHelper(u);try{for(t.s();!(e=t.n()).done;)e.value.addEventListener("input",function(e){return s(e.target,!e.target.checkValidity())})}catch(e){t.e(e)}finally{t.f()}c.addEventListener("submit",function(e){e.preventDefault();var t=_createForOfIteratorHelper(u);try{for(t.s();!(r=t.n()).done;){var r=r.value;i(r),r.classList.remove("field-error"),r.checkValidity()||(function(e,t){i(e);var r=document.createElement("div");r.classList.add("form-error-text"),r.innerText=t,null===e.nextElementSibling?e.parentElement.appendChild(r):e.nextElementSibling.classList.contains("form-error-text")||e.parentElement.insertBefore(r,e.nextElementSibling)}(r,r.dataset.errorText),r.classList.add("field-error"),formHasErrors=!0)}}catch(e){t.e(e)}finally{t.f()}var a=c.querySelector("[type=submit]");a.disabled=!0,a.classList.add("loading");var n=new FormData(c),o=c.getAttribute("action"),e=c.getAttribute("method");fetch(o,{method:e.toUpperCase(),body:n}).then(function(e){return e.json()}).then(function(e){if(e.errors){var t=e.errors.map(function(e){return'[name="'.concat(e,'"]')}),r=_createForOfIteratorHelper(c.querySelectorAll(t.join(",")));try{for(r.s();!(n=r.n()).done;){var n=n.value;s(n,!0),l(n,!0)}}catch(e){r.e(e)}finally{r.f()}}else"ok"===e.status&&((t=document.createElement("div")).classList.add("form-send-success"),t.innerText="Wysłanie wiadomości się nie powiodło",c.parentElement.insertBefore(t,c),t.innerHTML="\n                          <strong>Wiadomość została wysłana</strong>\n                          <span>Dziękujemy za kontakt. Postaramy się odpowiedzieć jak najszybciej</span>\n                      ",c.remove()),"error"===e.status&&((e=document.querySelector(".form-send-error"))&&e.remove(),(e=document.createElement("div")).classList.add("form-send-error"),e.innerText="Wysłanie wiadomości się nie powiodło",a.parentElement.appendChild(e))}).finally(function(){a.disabled=!1,a.classList.remove("loading")})})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
